public class KDtree3D<E extends Comparable<E>>
{
  private class Point3D<E>
  {
    Point3D<E> left;
    Point3D<E> right;
    E x;
    E y;
    E z;
    
    public Point3D(E x,E y,E z)
    {
      this.x = x;
      this.y = y;
      this.z = z;
      left = null;
      right = null;
    }
  }
  
  private Point3D<E> root;
  
  public KDtree3D()
  {
    root = null;
  }
  
  public KDtree3D(Point3D<E> root)
  {
    this.root = root;
  }
  
  public void insert(Point3D<E> point)
  {
    root = insert(point, root, 0)
  }
  private Point3D<E> insert(Point3D<E> point, Point<E> r,int level)
  {
    if (level == 0)
    {
      if (r == null)
      {
        return point;
      }
      else if (point.x.ComparaTo(r.x) == 0)
      {
        System.out.println("System Error! The same value of root");
        return r;
      }
      else if (point.x.ComparaTo(r.x) < 0)
      {
        level++;
        r.left = insert(point, r.left, level);
        return r;
      }
      else
      {
        level++;
        r.right = insert(point, r.right, level);
        return r;
      }
    }
    if (level == 1)
    {
      if (r == null)
      {
        return point;
      }
      else if (point.y.ComparaTo(r.y) == 0)
      {
        System.out.println("System Error! The same Value of root");
        return r;
      }
      else if (point.y.ComparaTo(r.y) < 0)
      {
        level++;
        r.left = insert(point, r.left, level);
        return r;
      }
      else
      {
        level++;
        r.right = insert(point, r.right, level);
        return r;
      }
    }
    if (level == 2)
    {
      if (r == null)
      {
        return point;
      }
      else if (point.z.ComparaTo(r.z) == 0)
      {
        System.out.println("System Error! The same Value of root");
        return r;
      }
      else if (point.z.ComparaTo(r.z) < 0)
      {
        level = 0;
        r.left = insert(point, r.left, level);
        return r;
      }
      else
      {
        level = 0;
        r.right = insert(point, r.right, level);
        return r;
      }
    }
  }
  public void remove(Point3D point)
  {
    root = remove(root, point);
  }
  private Point3D remove(Point3D root,Point3D point)
